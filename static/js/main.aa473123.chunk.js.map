{"version":3,"sources":["components/DayDate.jsx","components/Location.jsx","components/SRALabImg.jsx","components/SRAMission.jsx","App.js","serviceWorker.js","index.js"],"names":["CurrentTime","useState","Date","time","setTime","dayOfWeek","setDayOfWeek","useEffect","interval","setInterval","clearInterval","currentDayOfWeek","getDay","className","src","process","alt","align","style","textAlign","padding","hours","getHours","minutes","getMinutes","ampm","formattedMinutes","formatTime","margin","today","month","getMonth","day","getDate","year","getFullYear","getCurrentDate","Location","position","bottom","left","right","display","height","width","SRALabImg","SRAMission","pages","component","DayDate","App","pageIndex","setPageIndex","length","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa473123.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport './/App.css';\r\n\r\nfunction CurrentTime() {\r\n    const [time, setTime] = useState(new Date());\r\n    const [dayOfWeek, setDayOfWeek] = useState('');\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n    useEffect(() => {\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const today = new Date();\r\n        const currentDayOfWeek = days[today.getDay()];\r\n        setDayOfWeek(currentDayOfWeek);\r\n    }, []);\r\n\r\n\r\n    const formatTime = (time) => {\r\n        const hours = time.getHours();\r\n        const minutes = time.getMinutes();\r\n        const ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n        const formattedHours = hours % 12 || 12;\r\n        const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        return `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n    };\r\n\r\n    const getCurrentDate = () => {\r\n        const months = [\r\n            'January', 'February', 'March', 'April', 'May', 'June',\r\n            'July', 'August', 'September', 'October', 'November', 'December'\r\n        ];\r\n\r\n        const today = new Date();\r\n        const month = months[today.getMonth()];\r\n        const day = today.getDate();\r\n        const year = today.getFullYear();\r\n\r\n        return `${month} ${day}, ${year}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"App-header\">\r\n            <img src={process.env.PUBLIC_URL+'/img/logo.jpg'} alt=\"logo\" align=\"left\"/>\r\n            <div style={{ textAlign: 'right', padding: '30px'}}>\r\n                {formatTime(time)}\r\n            </div>\r\n            <div className=\"body\">\r\n                <p style={{ margin: '0 auto', }}>Today's date is: <br/> {getCurrentDate()}.<br /><br /> Today is {dayOfWeek}.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentTime;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport './/App.css';\r\n\r\nfunction Location() {\r\n    const [time, setTime] = useState(new Date());\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const formatTime = (time) => {\r\n        const hours = time.getHours();\r\n        const minutes = time.getMinutes();\r\n        const ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n        const formattedHours = hours % 12 || 12;\r\n        const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        return `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"App-header\">\r\n            <img src={process.env.PUBLIC_URL+'/img/logo.jpg'} alt=\"logo\" align=\"left\"/>\r\n            <div style={{ textAlign: 'right', padding: '30px'}}>\r\n                {formatTime(time)}\r\n            </div>\r\n            <div className=\"body\" >\r\n                <p style={{ margin: '0 auto', }}>I am in Chicago, IL <br />\r\n                    <div style={{ position: \"fixed\", bottom: 0, left: 0, right: 0 }}>\r\n                        <img src={process.env.PUBLIC_URL+'/img/skyline.png'} alt=\"\" style={{ display: \"block\", margin: \"0 auto\", height: \"35vh\", width:\"100vw\"}} />\r\n                    </div>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Location;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport './/App.css';\r\n\r\nfunction SRALabImg() {\r\n    const [time, setTime] = useState(new Date());\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const formatTime = (time) => {\r\n        const hours = time.getHours();\r\n        const minutes = time.getMinutes();\r\n        const ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n        const formattedHours = hours % 12 || 12;\r\n        const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        return `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"App-header\">\r\n        <img src={process.env.PUBLIC_URL+'/img/logo.jpg'} alt=\"logo\" align=\"left\"/>\r\n        <div style={{ textAlign: 'right', padding: '30px'}}>\r\n            {formatTime(time)}\r\n        </div>\r\n            <div>\r\n                <img src={process.env.PUBLIC_URL+'/img/entrance1.jpg'} alt=\"entrance\" style={{height: \"75vh\", width: \"100vw\", align: \"center\" }} />\r\n            </div>\r\n\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default SRALabImg;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport './/App.css';\r\n\r\nfunction SRAMission() {\r\n    const [time, setTime] = useState(new Date());\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const formatTime = (time) => {\r\n        const hours = time.getHours();\r\n        const minutes = time.getMinutes();\r\n        const ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n        const formattedHours = hours % 12 || 12;\r\n        const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        return `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n    };\r\n    return (\r\n        <div className=\"App-header\">\r\n           <img src={process.env.PUBLIC_URL+'/img/logo.jpg'} alt=\"logo\" align=\"left\"/>\r\n            <div style={{ textAlign: 'right', padding: '30px'}}>\r\n                {formatTime(time)}\r\n            </div>\r\n            <div className=\"body\">\r\n                <p>I am in a hospital where I focus on brain recovery.</p>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SRAMission;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DayDate from \"./components/DayDate\";\r\nimport Location from \"./components/Location\";\r\nimport SRALabImg from \"./components/SRALabImg\";\r\nimport SRAMission from \"./components/SRAMission\";\r\nconst pages = [\r\n  { component: <DayDate /> },\r\n  { component: <Location /> },\r\n  { component: <SRALabImg /> },\r\n  { component: <SRAMission /> }\r\n];\r\n\r\nfunction App() {\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setPageIndex((pageIndex + 1) % pages.length);\r\n    }, 15000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>{pages[pageIndex].title}</h1>\r\n      {pages[pageIndex].component}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}